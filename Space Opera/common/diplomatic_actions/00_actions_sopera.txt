# Variables:
#  is_listed, boolean, decides if this diplomactic action type is listed in diplomatic view.
#  prerequisites, list, the technologies required to enable the player to send this diplomatic action.
#  requires_actor_peace, boolean, false by default, will require the actor to be at peace for this action to pass the possible check.
#  requires_alliance_vote, boolean, false by default, will require the alliance of the actor to vote for this action before passing it on to the recipient.
#  requires_actor_independence, boolean, true by default, will require the actor to be independent.
#  requires_recipient_independence, boolean, true by default, will require the recipient to be independent.
#  requires_actor_federation_leader, boolean, false by default, if the actor is in a federation, he has to be the leader of it.
#  requires_recipient_federation_leader, boolean, true by default, if the recipient is in a federation, he has to be the leader of it.
#  show_decline_to_alliance_members, boolean, false by default, will show your alliance members when you decline a proposal of this type.
#  should_show_accept_message, decides whether actor gets a response on acceptance (otherwise just on decline)
#  should_show_auto_accept_message_recipient, boolean, decides if the recipient gets a message showing the diplomatic action.
#  should_open_auto_accept_message_recipient, boolean, decides if the recipient automatically opens this message.
#  should_notify_auto_recipient_on_vote_fail, boolean, decides if recipient is notified of vote failure if action was auto accepted.
#  should_show_auto_accept_message_actor, boolean, decides if the actor gets a reply showing the diplomatic action.
#  should_notify_all_communications, boolean, decides if a message notification is sent to all countries who have communications with actor or recipient
#  AI_acceptance_base_value, default = 0
#  potential, trigger, root is actor, from is recipient, decides if the action is shown
#  possible, trigger, root is actor, from is recipient, prev is either requester (if action is done in response to an ask_xxx counterpart) or same as root, decides if the action is still possible
#  proposable, trigger, root is actor, from is recipient, decides if the action is proposable

# Creates a federation between two empires or invites an empire to an existing federation. Requires unanimous vote from the federation, if one exists already.
# Usable by regular empires only. Raises trust over time.
action_invite_to_federation = {
	icon = "GFX_diplomacy_status_federation"
	requires_actor_peace = yes
	requires_recipient_peace = yes
	requires_alliance_vote = yes
	diplo_view_acceptance_icon = yes
	should_notify_all_communications = yes
	AI_acceptance_base_value = -50
	action_type = positive
	should_show_auto_accept_message_recipient = yes
	should_open_auto_accept_message_recipient = yes
	#should_notify_auto_recipient_on_vote_fail = yes #Wasn't recognized as an action

	potential = {
		hidden_trigger = {
			is_fallen_machine_empire = no
			from = { is_fallen_machine_empire = no }
		}
	}

	possible = {
		
		custom_tooltip = {
			fail_text = "federation_requires_materialist"
			OR = {
				has_federation = no
				federation = { NOT = { has_federation_type = research_federation } }
				from = { has_ethic = ethic_materialist }
				from = { has_ethic = ethic_fanatic_materialist }
				from = { has_authority = auth_machine_intelligence }
				from = { has_valid_civic = civic_hive_natural_neural_network }
			}
		}
		
		custom_tooltip = {
			fail_text = "federation_requires_militarist"
			OR = {
				has_federation = no
				federation = { NOT = { has_federation_type = military_federation } }
				from = { has_ethic = ethic_militarist }
				from = { has_ethic = ethic_fanatic_militarist }
				from = { has_valid_civic = civic_machine_warbots }
				from = { has_valid_civic = civic_hive_strength_of_legions }
				from = { has_valid_civic = civic_hive_subspace_ephapse }
			}
		}
		
		custom_tooltip = {
			fail_text = "federation_requires_trade"
			OR = {
				has_federation = no
				federation = { NOT = { has_federation_type = trade_federation } }
				from = { has_valid_civic = civic_corporate_dominion }
				from = { has_valid_civic = civic_merchant_guilds }
				from = { has_authority = auth_corporate }
			}
		}
		
		custom_tooltip =  {
			fail_text = "federation_size_limit_fail"
			OR = {
				has_federation = no
				federation = {
					OR = {
						AND = {
							num_members < 3
							federation_level < 3
						}
						AND = {
							num_members < 4
							federation_level < 3
							has_federation_type = hegemony_federation
						}
						AND = {
							num_members < 4
							federation_level = 3
						}
						AND = {
							num_members < 5
							federation_level = 3
							has_federation_type = hegemony_federation
						}
						AND = {
							num_members < 5
							federation_level = 4
						}
						AND = {
							num_members < 6
							federation_level = 4
							has_federation_type = hegemony_federation
						}
						AND = {
							num_members < 8
							federation_level = 5
						}
						AND = {
							num_members < 9
							federation_level = 5
							has_federation_type = hegemony_federation
						}
					}
				}
			}
		}


		#makes federations a tech unlock instead of tradition; Space Opera Edit.
		custom_tooltip = {
			fail_text = "requires_technology_the_federation"
			OR = {
				has_authority = auth_machine_intelligence
				has_federation = yes
				has_technology = tech_form_federations
				NOT = { is_country_type = default }
			}
		}
		custom_tooltip = {
			fail_text = "requires_technology_the_federation"
			OR = {
				NOT = { has_authority = auth_machine_intelligence }
				has_federation = yes
				has_technology = tech_form_federations
				NOT = { is_country_type = default }
			}
		}
		custom_tooltip = {
			fail_text = "requires_actor_not_fanatic_purifiers"
			OR = {
				is_same_species = from
				NOT = { has_valid_civic = civic_fanatic_purifiers	}
			}
		}
		custom_tooltip = {
			fail_text = "requires_recipient_not_fanatic_purifiers"
			OR = {
				is_same_species = from
				from = { NOT = { has_valid_civic = civic_fanatic_purifiers } }
			}
		}
		custom_tooltip = {
			fail_text = "requires_actor_not_devouring_swarm"
			NOT = { has_valid_civic = civic_hive_devouring_swarm	}
		}
		custom_tooltip = {
			fail_text = "requires_recipient_not_devouring_swarm"
			from = { NOT = { has_valid_civic = civic_hive_devouring_swarm } }
		}

		# When actor is terminator, requires target machine empire/synth
		custom_tooltip = {
			fail_text = "requires_actor_not_machine_terminator"
			OR = {
				is_same_species = from
				NOT = { has_civic = civic_machine_terminator }
				AND = {
					has_civic = civic_machine_terminator
					from = {
						OR = {
							has_country_flag = synthetic_empire
							has_authority = auth_machine_intelligence
						}
					}
				}
			}
		}
		# When actor is organic, requires target is not exterminator
		custom_tooltip = {
			fail_text = "requires_recipient_not_machine_terminator"
			OR = {
				is_same_species = from
				from = { NOT = { has_civic = civic_machine_terminator } }
				AND = {
					from = { has_civic = civic_machine_terminator }
					OR = {
						has_country_flag = synthetic_empire
						has_authority = auth_machine_intelligence
					}
				}
			}
		}

		
		if = {
			limit = { from = { has_valid_civic = civic_inwards_perfection } }
			if = {
				limit = {
					has_intel = {
						who = from
						intel = civics
					}
				}
				custom_tooltip = {
					fail_text = requires_recipient_not_inward_perfection
					always = no
				}
			}
			else = {
				custom_tooltip = {
					fail_text = diplo_action_no_low_intel
					always = no
				}
			}
		}
		
		
		custom_tooltip = {
			fail_text = "requires_actor_not_inward_perfection"
			NOT = { has_valid_civic = civic_inwards_perfection }
		}
		custom_tooltip = {
			fail_text = "requires_excellent_or_better_opinion"

			OR = {
				from = { is_same_value = prevprev } # Bypass opinion check if we are proposing on behalf of recipient
				opinion_level = { who = from level >= excellent }
				is_improving_relations_with = from
			}
		}
		
		# Members of the Galactic Empire can't be in federations
		custom_tooltip = {
			fail_text = "requires_actor_recipient_not_in_galactic_empire"
			NAND = {
				has_galactic_emperor = yes
				OR = {
					is_galactic_community_member = yes
					from = { is_galactic_community_member = yes }
				}
			}
		}
	}
}

# Break an existing commercial pact, harms relations and sets a 10 year truce.
action_break_commercial_pact = {
	icon = "GFX_diplomacy_status_commercial_pact"
	auto_accepted = yes
	should_notify_all_communications = yes
	should_show_auto_accept_message_recipient = yes
	requires_actor_independence = no
	requires_recipient_independence = no
	action_type = negative
}

# Break an existing commercial pact, harms relations and sets a 10 year truce.
action_break_research_agreement = {
	icon = "GFX_diplomacy_status_research_agreement"
	auto_accepted = yes
	should_notify_all_communications = yes
	should_show_auto_accept_message_recipient = yes
	requires_actor_independence = no
	requires_recipient_independence = no
	action_type = negative
}